name: Build and Release EXE

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      # Step 4: Build executable with Nuitka
      - name: Build executable with Nuitka
        run: |
          nuitka --onefile --standalone --windows-console-mode=disable --assume-yes-for-downloads --enable-plugin=tk-inter --enable-plugin=no-qt src/color_palette_creator.py

      # Step 5: Verify Output Files
      - name: Verify Output Files
        run: |
          [ -f "color_palette_creator.bin" ] || (echo "Linux build failed, file missing." && exit 1)

      # Step 6: Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-build
          path: color_palette_creator.bin

  build-macos:
    runs-on: macos-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      # Step 4: Build executable with Nuitka
      - name: Build executable with Nuitka
        run: |
          nuitka --onefile --standalone --windows-console-mode=disable --assume-yes-for-downloads --macos-app-icon=assets/appl.icns --enable-plugin=tk-inter --enable-plugin=no-qt src/color_palette_creator.py

      # Step 5: Verify Output Files
      - name: Verify Output Files
        run: |
          [ -f "color_palette_creator.bin" ] || (echo "macOS build failed, file missing." && exit 1)

      # Step 6: Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos-build
          path: color_palette_creator.bin

  build-windows:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      # Step 4: Download and Install Latest UPX
      - name: Download and Install UPX
        run: |
          # Fetch the latest release URL of UPX from GitHub API
          $latestRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/upx/upx/releases/latest"
          $downloadUrl = $latestRelease.assets | Where-Object { $_.name -like "*win64.zip" } | Select-Object -ExpandProperty browser_download_url
          
          # Download and extract UPX
          Invoke-WebRequest -Uri $downloadUrl -OutFile upx.zip
          Expand-Archive -Path upx.zip -DestinationPath upx

          # Move UPX executable to main `upx` folder for easier access
          # Move-Item -Path .\upx\*\upx.exe -Destination .\upx.exe
          # Add UPX to PATH
          $env:Path += ";$(Resolve-Path .\upx\*)"


      # Step 5: Build executable with Nuitka
      - name: Build executable with Nuitka
        run: |
          nuitka --onefile --standalone --windows-console-mode=disable --enable-plugin=upx --assume-yes-for-downloads --windows-icon-from-ico=assets/appl.ico --enable-plugin=tk-inter --enable-plugin=no-qt src/color_palette_creator.py

      # Step 6: Verify Output Files
      - name: Verify Output Files
        run: |
          if (!(Test-Path -Path "color_palette_creator.exe")) {
            Write-Error "Windows build failed, file missing."
            exit 1
          }

      # Step 7: Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-build
          path: color_palette_creator.exe

  release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Download Artifacts
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: linux-build
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-build
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows-build

      # Step 3: Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            color_palette_creator.exe
            color_palette_creator.app
            color_palette_creator.bin
            src/color_palette_creator.py
            requirements.txt
