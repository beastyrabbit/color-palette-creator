name: Build and Release EXE

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        
    runs-on: ${{ matrix.os }}

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      # Step 4: Download and Install Latest UPX (Windows Only)
      - name: Download and Install UPX (Windows Only)
        if: runner.os == 'Windows'
        run: |
          # Fetch the latest release URL of UPX from GitHub API
          $latestRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/upx/upx/releases/latest"
          $downloadUrl = $latestRelease.assets | Where-Object { $_.name -like "*win64.zip" } | Select-Object -ExpandProperty browser_download_url
          
          # Download and extract UPX
          Invoke-WebRequest -Uri $downloadUrl -OutFile upx.zip
          Expand-Archive -Path upx.zip -DestinationPath upx

          # Move UPX executable to main `upx` folder for easier access
          Move-Item -Path .\upx\*\upx.exe -Destination .\upx\upx.exe

      # Step 5: Build executable with Nuitka
      - name: Build executable with Nuitka
        run: |
          if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
            nuitka --standalone --macos-app-icon=assets/appl.icns --enable-plugin=tk-inter --enable-plugin=no-qt src/color_palette_creator.py
          elif [ "$RUNNER_OS" == "Windows" ]; then
            nuitka --standalone --macos-app-icon=assets/appl.icns --upx-binary=upx/upx.exe  --windows-console-mode=disable --enable-plugin=upx --assume-yes-for-downloads --windows-icon-from-ico=assets/appl.ico --enable-plugin=tk-inter --enable-plugin=no-qt src/color_palette_creator.py
          fi

      # Step 6: Verify Output Files
      - name: Verify Output Files
        run: |
          FILES_MISSING=0
          if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
            [ -f "color_palette_creator.bin" ] || FILES_MISSING=1
          elif [ "$RUNNER_OS" == "Windows" ]; then
            [ -f "color_palette_creator.exe" ] || FILES_MISSING=1
          fi
          if [ "$FILES_MISSING" -eq 1 ]; then
            echo "One or more output files are missing. Skipping release."
            exit 1
          fi

      # Step 7: Create GitHub Release (if files are present)
      - name: Create GitHub Release
        if: success()  # Only run if the previous steps were successful
        uses: softprops/action-gh-release@v1
        with:
          files: |
            color_palette_creator.exe
            color_palette_creator.app
            color_palette_creator.bin
            src/color_palette_creator.py
            requirements.txt
